class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        result=[]
        nums.sort()
        i=0
        while i<len(nums):
            if i+1==len(nums) or nums[i]!=nums[i+1]:
                result.append(nums[i])
                i+=1
            else:
                i+=2
        return result
        
//In the first pass, we XOR all elements in the array, and get the XOR of the two numbers we need to find. 
//Note that since the two numbers are distinct, so there must be a set bit (that is, the bit with value '1') in the XOR result. Find
//out an arbitrary set bit (for example, the rightmost set bit).

//In the second pass, we divide all numbers into two groups, one with the aforementioned bit set, 
//another with the aforementinoed bit unset. Two different numbers we need to find must fall into thte two distrinct groups. 
//XOR numbers in each group, we can find a number in either group.        
class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        total_sum=0
        for num in nums:
            total_sum^=num
        // find the rightmost '1' bit
        total_sum&=-total_sum
        yes=no=0
        for num in nums:
            if num&total_sum==0:
                yes^=num
            else:
                no^=num
        return [yes,no]
