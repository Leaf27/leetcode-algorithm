public class Solution {
    public List<int[]> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        List<int[]> res = new ArrayList<>();
        if(nums1== null || nums2==null || nums1.length == 0 || nums2.length == 0) return res;
        
        PriorityQueue<Node> queue = new PriorityQueue<>();
        for(int i = 0 ; i< nums1.length ; i++) queue.offer(new Node(nums1[i],nums2[0],i, 0));
        
        while(res.size()<k)
        {
            Node node = queue.poll();
            res.add(node.values);
            
            int index1 = node.indexs[0], index2 = node.indexs[1];
            if(index2<nums2.length-1)
            {
                queue.offer(new Node(nums1[index1],nums2[index2+1],index1, index2+1));
            }
            else
            {
                if(index1<nums1.length-1) continue;
                else break;
            }
        }
        
        return res;
    }
    
    public class Node implements Comparable<Node> {
        int sum;
        int[] values;
        int[] indexs;
        
        public Node(int value1, int value2, int index1 , int index2)
        {
            values = new int[]{value1, value2};
            indexs = new int[]{index1, index2};
            sum = value1+value2;
        }
        
        public int compareTo(Node n2)
        {
            return Integer.compare(sum, n2.sum);
        }
    }
}
