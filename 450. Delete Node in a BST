/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        TreeNode[] ParentAndDelete = find(root, key);
        // did not find the key.
        if(ParentAndDelete[1] == null) return root;
        
        TreeNode nextSmaller = findNextSmaller(ParentAndDelete[1]);
        // left children is empty.
        if(nextSmaller == null)
        {
            // deleted one is the root.
            if(ParentAndDelete[0]==null) return root.right;
            else {
                if(ParentAndDelete[0].left == ParentAndDelete[1]) ParentAndDelete[0].left = ParentAndDelete[1].right;
                else ParentAndDelete[0].right = ParentAndDelete[1].right;
            }
        }
        else ParentAndDelete[1].val = nextSmaller.val;
        
        return root;
    }
    
    private TreeNode[] find(TreeNode root , int key)
    {
        TreeNode parent = null;
        while(root!=null)
        {
            if(root.val==key) break;
            else
            {
                parent = root;
                if (root.val<key) root = root.right;
                else root = root.left;
            }
        }
        return new TreeNode[]{parent, root};
    }
    
    private TreeNode findNextSmaller(TreeNode root)
    {
        TreeNode parent = root , cur = root.left;
        if(cur == null) return null;
        
        while(cur.right!=null)
        {
            parent = cur;
            cur = cur.right;
        }
        
        if(parent == root) parent.left = cur.left;
        else parent.right = cur.left;
        
        return cur;
    }
}
