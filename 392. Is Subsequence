// iterate t once and store index of each char into indices. Then use binary search to speed up testing
class Solution(object):
    def isSubsequence(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: bool
        """
        def find_index(indice,char,target):
            a_list=indice[ord(char)-ord('a')]
            start=0
            end=len(a_list)-1
            if len(a_list)==0 or a_list[start]>=target:
                return -1
            while start<len(a_list) and end>=0 and start<=end:
                mid=int((start+end)/2)
                if a_list[mid]>target:
                    end=mid-1
                elif a_list[mid]<target:
                    start=mid+1
                else:
                    return a_list[mid-1]
            if end>=0 and a_list[end]<target:
                return a_list[end]
            elif end >=0 and a_list[end-1]<target:
                return a_list[end-1]
            else:
                return -1
                
        indice=[[] for _ in range(26)]
        for i in range(len(t)):
            indice[ord(t[i])-ord('a')].append(i)
        target=len(t)
        for char in s[::-1]:
            prev=find_index(indice,char,target)
            if prev==-1:
                return False
            else:
                target=prev
        return True
        
  // ite is a iterator. Iterator yields items that was not yielded in previous iteration. 
  class Solution(object):
    def isSubsequence(self, s, t):
        it = iter(t)
        return all(c in ite for c in s)
        
  // same idea with soluction 2      
  class Solution(object):
    def isSubsequence(self, s, t):
        s_index=0
        if len(s)==0:
            return True
        for i in range(len(t)):
            if s_index<len(s) and t[i]==s[s_index]:
                s_index+=1
            if s_index==len(s):
                return True
        return False
