/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public int[] findRightInterval(Interval[] intervals) {
        if(intervals==null || intervals.length ==0) return new int[0];
        int[] result = new int[intervals.length];
        List<newInterval> list = new ArrayList<>();
        for(int i=0;i<intervals.length;i++) list.add(new newInterval(intervals[i],i));
        Collections.sort(list, new Comparator<newInterval>(){
            public int compare(newInterval i1, newInterval i2)
            {
                return Integer.compare(i1.interval.start,i2.interval.start);
            }
        });
        for(int i = 0;i<intervals.length;i++)
        {
            result[i]=binarySearch(list,intervals[i].end);
        }
        return result;
    }
    
    private int binarySearch(List<newInterval> list, int target)
    {
        int start =0, end = list.size()-1;
        while(start<end)
        {
            int mid = (start+end)/2;
            if(list.get(mid).interval.start==target) return list.get(mid).index;
            else if(list.get(mid).interval.start<target) start=mid+1;
            else end = mid;
        }
        if(start==list.size()-1 && list.get(start).interval.start<target) return -1;
        else return list.get(start).index;
    }
    
    public class newInterval
    {
        Interval interval;
        int index;
        public newInterval(Interval interval, int index)
        {
            this.interval = interval;
            this.index = index;
        }
    }
}
