/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<>();
        StringBuilder sb = new StringBuilder();
        if(root==null) return "";
        queue.offer(root);
        while(!queue.isEmpty())
        {
            root = queue.poll();
            if(root.left!= null) queue.offer(root.left);
            if(root.right!=null) queue.offer(root.right);
            sb.append(root.val+",");
        }
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        int index = 0;
        TreeNode root = null;
        if(data.length()==0) return root;
        while(index<data.length()-1)
        {
            int nextSeperator = data.indexOf(",",index);
            int piece = Integer.parseInt(data.substring(index,nextSeperator));
            if(root==null) root=new TreeNode(piece);
            else append(root,piece);
            index = nextSeperator+1;
        }
        return root;
    }
    
    private void append(TreeNode root, int data)
    {
        while(true)
        {
            if(data>root.val){
                if (root.right==null) {
                    root.right=new TreeNode(data);
                    return;
                }
                else root = root.right;
            }
            else
            {
                if(root.left==null) {
                    root.left = new TreeNode(data);
                    return;
                }
                else root = root.left;
            }
        }
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
