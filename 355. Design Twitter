public class Twitter {
    Map<Integer, User> users;
    int timeStamp = 0;
    /** Initialize your data structure here. */
    public Twitter() {
        users = new HashMap<>();
    }
    
    /** Compose a new tweet. */
    public void postTweet(int userId, int tweetId) {
        
        Tweet tweet = new Tweet(tweetId);
        
        User user = users.computeIfAbsent(userId, k -> new User(userId));
        
        tweet.next = user.tweet_head;
        
        user.tweet_head = tweet;
        
        
    }
    
    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */
    public List<Integer> getNewsFeed(int userId) {
        
        if(!users.containsKey(userId)) return new ArrayList<>();
        
        Queue<Tweet> queue = new PriorityQueue<>(10, new Comparator<Tweet>(){
            public int compare(Tweet t1, Tweet t2)
            {
                return Integer.compare(t2.time, t1.time);
            }
        });
         
        User user = users.get(userId);
        
        for(User followee : user.followees)
        {
            if(followee.tweet_head!=null)
            {
                queue.add(followee.tweet_head);
            }
        }
        
        List<Integer> res = new ArrayList<>();
        
        while(!queue.isEmpty() && res.size()<10)
        {
            Tweet tweet = queue.poll();
            res.add(tweet.tweetID);
            if(tweet.next!=null) queue.add(tweet.next);
        }
        return res;
    }
    
    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */
    public void follow(int followerId, int followeeId) {
        if (followerId == followeeId) return;
        
        User followee = users.computeIfAbsent(followeeId, k -> new User(followeeId));
        
        User follower = users.computeIfAbsent(followerId, k -> new User(followerId));
        
        follower.followees.add(followee);
     
    }
    
    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */
    public void unfollow(int followerId, int followeeId) {
        if (followerId == followeeId) return;
        
        if(users.containsKey(followeeId) && users.containsKey(followerId))
        {
            User followee = users.get(followeeId);
            
            User follower = users.get(followerId);
            
            follower.followees.remove(followee);
        }
    }
    
    public class User
    {
        int ID;
        Tweet tweet_head;
        Set<User> followees;
        
        public User(int ID)
        {
            this.ID = ID;
            tweet_head = null;
            followees = new HashSet<>();
            followees.add(this);
        }
        
        public int hashCode()
        {
            return ID;
        }
        
        public boolean equals(Object o)
        {
            if(o instanceof User)
            {
                User u = (User) o;
                return u.ID == ID;
            }
            return false;
        }
        
    }
    
    public class Tweet
    {
        int tweetID;
        int time;
        Tweet next;
        
        public Tweet(int tweetID)
        {
            this.tweetID = tweetID;
            time = timeStamp++;
            next = null;
        }
    }
    
}

/**
 * Your Twitter object will be instantiated and called as such:
 * Twitter obj = new Twitter();
 * obj.postTweet(userId,tweetId);
 * List<Integer> param_2 = obj.getNewsFeed(userId);
 * obj.follow(followerId,followeeId);
 * obj.unfollow(followerId,followeeId);
 */
