/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *     // Constructor initializes an empty nested list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public void add(NestedInteger ni);
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class Solution {
    public NestedInteger deserialize(String s) {
        Stack<NestedInteger> stack = new Stack<>();
        
        String[] pieces = s.split(",");
        
        for(String piece : pieces)
        {
            int start = 0, end  = piece.length()-1;
            while(piece.charAt(start)=='[' || piece.charAt(end)==']')
            {
                if(piece.charAt(start)=='[') start++;
                if(piece.charAt(end)==']') end--;
            }
            
            for(int i = 0; i< start ; i++) stack.push(new NestedInteger());
            
            if(start!=end+1)
            {
                int num = Integer.parseInt(piece.substring(start, end+1));
            
                if (stack.size()!=0){
                    stack.peek().add(new NestedInteger(num));
                }
                else
                {
                    stack.push(new NestedInteger(num));
                }
            }
            
            
            for(int i = 0 ; i<piece.length()-1-end; i++)
            {
                if(stack.size()!=1)
                {
                    NestedInteger  nest = stack.pop();
                    stack.peek().add(nest);
                }
            }
        }
        
        return stack.pop();    
    }
}
