/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode current=head;
        ListNode newOne;
        int length=lengthOf(head);
        int halfLength=(int) length/2;
        // find the middle node
        for(int i=1;i<=halfLength;i++) current=current.next;
        if(length!=halfLength*2) current=current.next;
        //reverse the latter half one
        newOne=reverse(current);
        current=head;
        while(newOne!=null){
            if(newOne.val==current.val){
                newOne=newOne.next;
                current=current.next;
            }
            else return false;
        }
        return true;
    }
    
    public int lengthOf(ListNode head){
        int length=0;
        ListNode current=head;
        while(current!=null){
            length++;
            current=current.next;
        }
        return length;
    }
    
    public ListNode reverse(ListNode head){
        ListNode before=null;
        ListNode current=head;
        ListNode next;
        while(current!=null){
            next=current.next;
            current.next=before;
            before=current;
            current=next;
        }
       return before; 
    }
}
