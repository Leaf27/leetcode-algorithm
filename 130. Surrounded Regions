// DFS
public class Solution {
    int col,row;
    public void solve(char[][] board) {
        if(board.length==0) return ;
        col=board[0].length;
        row=board.length;
        for(int i=0;i<row;i++)
        {
           dfs(board,i,0);
           if(col>0) dfs(board,i,col-1);
        }
        
        for(int i=0;i<col;i++)
        {
           dfs(board,0,i);
           if(row>0) dfs(board,row-1,i);
        }
        
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                if(board[i][j]=='O') board[i][j]='X';
                else if(board[i][j]=='S') board[i][j]='O';
            }
        }
    }
    
    private void dfs(char[][] board, int i,int j)
    {
        if(board[i][j]=='O')
        {
            board[i][j]='S';
            if(i-1>0) dfs(board, i-1,j);
            if (i+1<row-1) dfs(board, i+1,j);
            if(j-1>0) dfs(board, i,j-1);
            if(j+1<col-1) dfs(board, i,j+1);
        }
    }
}
