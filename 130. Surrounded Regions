// DFS
public class Solution {
    int col,row;
    public void solve(char[][] board) {
        if(board.length==0) return ;
        col=board[0].length;
        row=board.length;
        for(int i=0;i<row;i++)
        {
           dfs(board,i,0);
           if(col>0) dfs(board,i,col-1);
        }
        
        for(int i=0;i<col;i++)
        {
           dfs(board,0,i);
           if(row>0) dfs(board,row-1,i);
        }
        
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                if(board[i][j]=='O') board[i][j]='X';
                else if(board[i][j]=='S') board[i][j]='O';
            }
        }
    }
    
    private void dfs(char[][] board, int i,int j)
    {
        if(board[i][j]=='O')
        {
            board[i][j]='S';
            if(i-1>0) dfs(board, i-1,j);
            if (i+1<row-1) dfs(board, i+1,j);
            if(j-1>0) dfs(board, i,j-1);
            if(j+1<col-1) dfs(board, i,j+1);
        }
    }
}
// union find
public class Solution {
    int row,col;
    public void solve(char[][] board) {
        if(board.length==0) return;
        row=board.length;
        col=board[0].length;
        unionFind union=new unionFind(row*col+1);
        int dummy=row*col;
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                if(board[i][j]=='O')
                {
                    if(i==0 || i==row-1 || j==0 || j==col-1) union.union(node(i,j),dummy);
                    if (i-1>=0 && board[i-1][j]=='O') union.union(node(i-1,j),node(i,j));
                    if (j-1>=0 && board[i][j-1]=='O') union.union(node(i,j-1),node(i,j));
                }
            }
        }
        
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
               if(board[i][j]=='O' && !union.isConnected(node(i,j),dummy)) board[i][j]='X';
            }
        }
    }
    
    public int node(int i, int j)
    {
        return i*col+j;
    }
    
    public class unionFind{
        int[] parents;
        public unionFind(int length)
        {
            parents=new int[length];
            for (int i=0;i<length;i++) parents[i]=i;
        }
        
        public void union(int i,int j)
        {
            int root1=find(i);
            int root2=find(j);
            if(root1!=root2) parents[root1]=root2;
        }
        
        public boolean isConnected(int i,int j)
        {
            return find(i)==find(j);
        }
        
        public int find(int j)
        {
            while(parents[j]!=j)
            {
                parents[j]=parents[parents[j]];
                j=parents[j];
            }
            return j;
        }
    }
}
