public class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res=new ArrayList<>();
        List<Integer> comb=new ArrayList<>();
        if(nums.length<3) return res;
        int skip1=nums[0]-1;
        for(int i=0;i<nums.length-2&&nums[i]<=0;i++){
            if(skip1==nums[i]) continue;
            comb.add(nums[i]);
            int skip2=nums[0]-1;
            for(int j=i+1;j<nums.length-1&&(nums[i]+nums[j])<=0;j++){
                if(skip2==nums[j]) continue;
                comb.add(nums[j]);
                if(isContained(nums, -(nums[i]+nums[j]),j+1,nums.length-1)){
                    comb.add(-(nums[i]+nums[j]));
                    res.add(new ArrayList<>(comb));
                    comb.remove(comb.size()-1);
                }
                skip2=comb.remove(comb.size()-1);
            }
            skip1=comb.remove(comb.size()-1);
        }
        return res;
    }
      private boolean isContained(int[] nums, int target, int start, int last){
        if(target<nums[start]||target>nums[last]) return false;
        while(start<last){
            int mid=start+(last-start)/2;
            if(nums[mid]>target) last=mid-1;
            else if(nums[mid]<target) start=mid+1;
            else return true;
        }
        if(nums[start]==target) return true;
        else return false;
    }
}
