/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public int eraseOverlapIntervals(Interval[] intervals) {
        if(intervals == null || intervals.length ==0) return 0;
        Arrays.sort(intervals, new Comparator<Interval>(){
            public int compare(Interval i1, Interval i2)
            {
                return (i1.start!=i2.start)? Integer.compare(i1.start,i2.start):Integer.compare(i1.end,i2.end);
            }
        });
        int res = 0;
        int temp_end = intervals[0].start;
        for(int i=0; i<intervals.length; i++)
        {
            if(intervals[i].start<temp_end) {
                res++;
                temp_end = Math.min(intervals[i].end,temp_end);
            }
            else
            {
                temp_end = intervals[i].end;
            }
        }
        return res;
    }
}
