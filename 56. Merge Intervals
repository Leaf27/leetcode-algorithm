/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        
        Collections.sort(intervals, new Comparator<Interval>(){
            public int compare(Interval i1, Interval i2)
            {
                return Integer.compare(i1.start, i2.start);
            }
        });
        
        List<Interval> res = new ArrayList<>();
        
        if(intervals == null || intervals.size()==0) return res;
        
        int start = intervals.get(0).start;
        int end = intervals.get(0).end;
        
        for(int j = 0 ; j< intervals.size() ; j++)
        {
            Interval i = intervals.get(j);
            if(i.start<=end)
            {
                end = Math.max(end, i.end);
            }
            else
            {
                res.add(new Interval(start, end));
                start = i.start;
                end = i.end;
            }
            
            if(j == intervals.size()-1)
            {
                res.add(new Interval(start, end));
            }
        }
        
        return res;
    }
}
